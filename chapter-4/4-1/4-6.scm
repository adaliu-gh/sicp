(define (let-package-install)
  (define (make-let paras body)
    (cons paras body))
  (define (let-body let)
    (cdr let))
  (define (let-parameters let)
    (car let))
  (define (let-variables paras)
    (if (null? paras)
        '()
        (cons (car (car paras))
              (let-variables (cdr paras)))))
  (define (let-expressions paras)
    (if (null? paras)
        '()
        (cons (cadr (car paras))
              (let-expressions (cdr paras)))))
  (define (let->call let)
    (let ((paras (let-package-install let)))
      (make-call (make-lambda (let-variables paras)
                              (let-body let))
                 (let-expressions paras))))
  (define (eval-self let env)
    (eval (let->call let) env))

  (define (tag x) (attach-tag 'let x))
  (put 'let 'eval eval-self)
  (put 'let 'make (lambda (x y) (tag (make-let x y)))))
