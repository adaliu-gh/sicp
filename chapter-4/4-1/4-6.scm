(define (let-package-install)
  (define (let-body let)
    (cdr let))
  (define (let-parameters let)
    (car let))
  (define (let-variables paras)
    (if (null? paras)
        '()
        (cons (car (car paras))
              (let-variables (cdr paras)))))
  (define (let-expressions paras)
    (if (null? paras)
        '()
        (cons (cadr (car paras))
              (let-expressions (cdr paras)))))
  (define (let->call let)
    (let ((paras (let-paras let)))
      (make-call (make-lambda (let-variables paras)
                              (let-body let))
                 (let-expressions paras))))
  (define (eval-self let env)
    (eval (let->call let) env))

  (define (tag x) (attach-tag 'let x))
  (put 'let 'eval eval-self)
  (put 'let 'make tag))

;;=========================
;; another version of let
(define (let-body let)
  (cddr let))
(define (let-parameters let)
  (cadr let))
(define (let-variables paras)
  (if (null? pars)
      '()
      (cons (car (car paras))
            (let-variables (cdr paras)))))
(define (let-expressions paras)
  (if (null? paras)
      '()
      (cons (cadr (car paras))
            (let-expressions (cdr paras)))))
(define (let->call let)
  (let ((paras (let-paras let)))
    (make-call (make-lambda (let-variables paras)
                            (let-body let))
               (let-expressions paras))))
(define (eval-let let env)
  (eval (let->call let) env))
