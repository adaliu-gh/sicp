(define (env-loop match-proc end-frame end-env env)
  (define (scan vars vals current-frame current-env)
    (cond ((null? vars)
           (end-frame current-frame current-env))
          ((eq? var (car vars))
           (match-proc vars vals current-frame current-env))
          (else
           (scan (cdr vars) (cdr vals) current-frame current-env))))
  (if (eq? env the-empty-environment)
      (end-env)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)
              frame env))))

(define (lookup-variable-value var env)
  (define (match-proc vars vals cur-frame cur-env) (car vals))
  (define (end-env) (error "Unbound variable" var))
  (define (end-frame cur-frame cur-env)
    (env-loop match-proc end-frame end-env (enclosing-environment cur-env)))
   (env-loop match-proc end-frame end-env env))

(define (set-variable-value! var val env)
  (define (match-proc vars vals cur-frame cur-env) (set-car! vals val))
  (define (end-env) (error "Unbound variable" var))
  (define (end-frame cur-frame cur-env)
    (env-loop match-proc end-frame end-env (enclosing-environment cur-env)))
  (env-loop match-proc end-frame end-env env))

(define (define-variable! var val env)
  (define (match-proc vars vals cur-frame cur-env) (set-car! vals val))
  (define (end-env) (error "Unbound variable" var))
  (define (end-frame cur-frame cur-env)
    (add-binding-to-frame! var val cur-frame))
  (env-loop match-proc end-frame end-env env))
