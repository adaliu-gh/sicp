(load "ch4-ambeval.scm")
(define (eight-queen-puzzle)
  (define (threatening-others? one others)
    (cond ((null? others) #f)
          ((same-column? one (car others)) #t)
          ((diagnal? one (car others)) #t)
          (else (threatening-others? one (cdr others)))))
  (define (same-column? one two)
    (= (cdr one) (cdr two)))
  (define (diagnal? one two)
    (let ((one-x (car one))
          (one-y (cdr one))
          (two-x (car two))
          (two-y (cdr two)))
      (= (abs (- one-x two-x) ) (abs (- one-y two-y) ))))
  (define (threatening-each-other? pos)
    (cond ((null? pos) #f)
          ((threatening-others? (car pos) (cdr pos)) #t)
          (else (threatening-each-other? (cdr pos)))))
  (let ((row1 (cons 1 (amb 1 2 3 4 5 6 7 8)))
        (row2 (cons 2 (amb 1 2 3 4 5 6 7 8)))
        (row3 (cons 3 (amb 1 2 3 4 5 6 7 8)))
        (row4 (cons 4 (amb 1 2 3 4 5 6 7 8)))
        (row5 (cons 5 (amb 1 2 3 4 5 6 7 8)))
        (row6 (cons 6 (amb 1 2 3 4 5 6 7 8)))
        (row7 (cons 7 (amb 1 2 3 4 5 6 7 8)))
        (row8 (cons 8 (amb 1 2 3 4 5 6 7 8))))
    (require (not (threatening-each-other?
                   (list row1 row2 row3 row4 row5 row6 row7 row8))))
    (list row1 row2 row3 row4 row5 row6 row7 row8)))

;; general method
(define (queen-puzzle n)
  (define (threatening-others? one others)
    (cond ((null? others) #f)
          ((same-column? one (car others)) #t)
          ((diagnal? one (car others)) #t)
          (else (threatening-others? one (cdr others)))))
  (define (same-column? one two)
    (= (cdr one) (cdr two)))
  (define (diagnal? one two)
    (let ((one-x (car one))
          (one-y (cdr one))
          (two-x (car two))
          (two-y (cdr two)))
      (= (abs (- one-x two-x) ) (abs (- one-y two-y) ))))
  (define (threatening-each-other? pos)
    (cond ((null? pos) #f)
          ((threatening-others? (car pos) (cdr pos)) #t)
          (else (threatening-each-other? (cdr pos)))))
  (let ((interval (enumerate-interval 1 n)))
    (let ((solutions (map (lambda (x) (cons x (apply amb interval))) interval)))
      (require (not (threatening-each-other? solutions)))
      solutions)))
