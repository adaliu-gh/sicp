(define (make-semaphore n)
  (let ((lock (make-mutex))
        (taken 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (lock 'acquire)
             (if (< taken n)
                 (begin (set! taken (+ taken 1)) (lock 'release))
                 (begin (lock 'release) (the-semaphore 'acquire))))
            ((eq? m 'release)
             (lock 'acquire)
             (begin (set! taken (- taken 1)) (lock 'release)))))
    the-semaphore))
