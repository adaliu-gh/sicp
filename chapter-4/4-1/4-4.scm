;; version 1
(define (and-package-install)
  (define (first-and and) (car and))
  (define (rest-and and) (cdr and))
  (define (eval-self and env)
    (cond ((null? and) true)
          ((not (first-and and)) (first-and and))
          (else (eval-self (rest-and and)))))
  (define (tag x) (attach-tag 'and x))
  (put 'and 'eval eval-self)
  (put 'and 'make tag))

(define (or-package-install)
  (define (first-or or) (car or))
  (define (rest-or or) (cdr or))
  (define (eval-self or env)
    (cond ((null? or) false)
          ((first-or or) (first-or or))
          (else (eval-self (rest-or or)))))
  (define (tag x) (attach-tag 'or x))
  (put 'or 'eval eval-self)
  (put 'or 'make tag))

;; version 2
(define (and-package-install)
  (define (first-and and) (car and))
  (define (rest-and and) (cdr and))
  (define (and->if and)
    (cond ((null? and) true)
          (else
           (make-if (first-and and)
                    (and->if (rest-and and))
                    (first-and and)))))
  (define (eval-self and env)
    (eval (and->if and) env))

  (define (tag x) (attach-tag 'and x))
  (put 'and 'eval eval-self)
  (put 'and 'make tag))


(define (or-package-install)
  (define (first-or or) (car or))
  (define (rest-or or) (cdr or))
  (define (or->if or)
    (if (null? or)
        false
        (make-if (first-or or)
                 (first-or or)
                 (or->if (rest-or)))))
  (define (eval-self or env)
    (eval (or->if or) env))
  (define (tag x) (attach-tag 'or x))
  (put 'or 'eval eval-self)
  (put 'or 'make tag))
